/**
 * log_recovey.cpp
 */

#include "logging/log_recovery.h"
#include "page/table_page.h"

namespace cmudb {
/*
 * deserialize a log record from log buffer
 * == raw bytes (log buffer) -> struct (log record)
 * == construct 1 row of WAL
 * 
 * log record == 1 row in WAL
 * 
 * 
 * @return: true means deserialize succeed, otherwise can't deserialize cause
 * incomplete log record
 * 
 * HINT: read log_record.h inside out
 */
bool LogRecovery::DeserializeLogRecord(const char *data,
                                             LogRecord &log_record) {
  
  // 1. raw bytes (log buffer) -> struct (log record)


  // 2. construct 1 row of WAL

  
  return false;
}


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////


/*
 * redo phase on TABLE PAGE level(table/table_page.h)
 * 
 * read log file from the beginning to end 
 * (you must prefetch log records into log buffer to reduce unnecessary I/O operations)
 * 
 *
 * remember to compare page's LSN with log_record's sequence number, 
 * and also build active_txn_ table & lsn_mapping_ table
 */
void LogRecovery::Redo() {

  // 1. while loop read 1 WAL log at 1 time

  // 2. raw bytes -> struct 

  // 3. re-execute WAL row 

  

}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

/*
 *undo phase on TABLE PAGE level(table/table_page.h)
 *iterate through active txn map and undo each operation
 */
void LogRecovery::Undo() {}

} // namespace cmudb
